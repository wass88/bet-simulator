以前のプロンプトは無視してください

ギャンブルゲームのシミュレータを書きます。    
JSによってベット額をコントロールすることで資産の分布できる可視化するツールです。    
バイオリン図が縦に並んだような形を考えています。    
ゲームのパラメータは当たり率とその倍率だけです。  
はじめに設定します。  
JS編集のUIとバイオリン図が並んだレイアウトになります。  
シミュレーションの実行の際、ある程度まではすべてのパターンを実行することで確実な図を得て、その後はシミュレーションに移ります。その閾値も設定できるようにしてください  

初回読み込み時に初期設定でシミュレータを実行してください 

掛額設定JSでは今の持ち額、前回の結果("win", "lose", null)、前回の付随状態から、
掛額と次の付随状態を返すようにしてください
コードのコメントは最低限で大丈夫です。

CSSはwater.cssをあててくださいCDNを使ってください。
body {max-width: none;}を入れてください。

バイオリン図のようなものは時系列に沿って1つのチャートに垂直方向に並べてください。
ここで描画にはSVGを直に使います。
描画するものは長方形です。
全探索中はその確率が幅、資産が縦になるような長方形を並べたチャートを1ラウンドとします
モンテカルロサンプリング中も同様に並べます
資産の順でソートしてください。左が高くなります。
元資産より負けている長方形は少し目立たない色にしてください。
各チャートの縦幅は80pxを確保して、必要ならばページの下にはみ出しても構いません。
縦幅を調節できるオプションも付けてください。
そのため、SVGの高さはシミュレーションごとに調整する必要があります。
元資産の横線をガイドで各ラウンドに入れてください。


除外する確率幅を指定できるようにします。
一定以上の勝ち額は幅が非常に狭く表示できないため、チャートには表示しないようにして、縦幅計算からも除外してください。
除外された部分の確率情報、ならした期待値と最大価値額の情報は各ラウンドにテキストでで表示してください。
この縦幅計算はすべてのラウンドを描画する前に、すべてのラウンドを確認して行う必要があります。
つまり、縦幅計算に用いるすべてのラウンドの縦幅の最大値は除外した分布で計算します。
高さはすべてのラウンドで共通のスケールである必要があります。
確率の表示場所はSVGに収まるチャートの左下の内側にしてください。

デフォルトに与えるJSの部分にはいくつかのかけ方をあらかじめ書いておきます。
最後にbetWays = [掛け方1、掛け方2]によって、掛け方を変えることができるようにしてください。
掛け方のnameを変えるのではなく、掛け方の英語名を関数名にしてそのままチャートのヘッダにしてください。
複数の掛け方を指定して、それぞれの掛け方の結果を横並びで比較できるようにしてください。
実装は、固定額、負けるたびに2倍、4倍になるマーチンゲール法、勝つたびに2倍4倍になり5連勝で1倍からやり直す逆マーチンゲール法、1-2-3から始まるモンテカルロ法の4つです。
すべての関数の実装の前にbaseBetを定数として共有してください。資金の1割です。
名前を渡すために、renderSVGChartにbetWaysを渡すのを忘れないでください。betWaysをUIからもらうためにreturn betWaysをつけて全体を関数として実行してください。

逆マーチンゲール法ははじめは1倍、勝てば2倍、更に勝てば4倍。
負けるか、あらかじめ決めた連勝を達成すれば1倍に戻す掛け方です。

モンテカルロ法とは、数列を引き継いでベットする掛け方です。数列の両端の和を掛けます。負けたらその額を右に加えます。飼ったら両端を消します。1つ以下になったら1-2-3からやり直します。

すべての文字は目立つように白縁取り黒文字で表示してください。
黒文字部分が潰れないように太字で、ストロークは0.5にしてください。

全体のレイアウトについて、エディタ側は30%の幅
チャート側は70%で全画面を使うようにしてください。


初期資産は100、勝率は45%、倍率は2です。 ゲーム数は30を初期値とします。


必要ならばこのプロンプトを改善するので、そのアドバイスもください。  
現状の実装も見せてください。